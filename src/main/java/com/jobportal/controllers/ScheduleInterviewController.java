package com.jobportal.controllers;

import com.jobportal.main.JobPortal;
import com.jobportal.models.Interview;
import com.jobportal.services.InterviewService;
import com.jobportal.utils.SessionManager;

import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.time.LocalDateTime;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;

public class ScheduleInterviewController {
    @FXML private ComboBox<String> candidateComboBox;
    @FXML private TextField positionField;
    @FXML private DatePicker datePicker;
    @FXML private ComboBox<String> timeComboBox;
    @FXML private ComboBox<String> typeComboBox;
    @FXML private TextArea notesArea;
    @FXML private Button scheduleButton;
    @FXML private Button backButton;

    private final InterviewService interviewService = new InterviewService();

    @FXML
    private void initialize() {
        setupComboBoxes();
        setupButtonHandlers();
    }

    private void setupComboBoxes() {
        // Setup time slots (every 30 minutes from 9 AM to 5 PM)
        ObservableList<String> timeSlots = FXCollections.observableArrayList();
        LocalTime startTime = LocalTime.of(9, 0);
        LocalTime endTime = LocalTime.of(17, 0);
        
        while (startTime.isBefore(endTime) || startTime.equals(endTime)) {
            timeSlots.add(startTime.toString());
            startTime = startTime.plusMinutes(30);
        }
        timeComboBox.setItems(timeSlots);

        // Setup interview types
        typeComboBox.setItems(FXCollections.observableArrayList(
            "Phone",
            "Video",
            "In-Person",
            "Technical Assessment"
        ));

        // TODO: Load candidates from database
        candidateComboBox.setItems(FXCollections.observableArrayList(
            "John Doe",
            "Jane Smith",
            "Alice Johnson"
        ));
    }

    private void setupButtonHandlers() {
        scheduleButton.setOnAction(e -> handleSchedule());
        backButton.setOnAction(e -> goToDashboard());
    }

    @FXML
    private void handleSchedule() {
        // Validate inputs
        if (candidateComboBox.getValue() == null || positionField.getText().trim().isEmpty() ||
            datePicker.getValue() == null || timeComboBox.getValue() == null ||
            typeComboBox.getValue() == null) {
            showAlert("Error", "Please fill in all required fields");
            return;
        }

        // Parse date and time
        LocalDate date = datePicker.getValue();
        LocalTime time = LocalTime.parse(timeComboBox.getValue());
        LocalDateTime dateTime = LocalDateTime.of(date, time);

        // Create interview object
        Interview interview = new Interview(
            null, // ID will be generated by service
            candidateComboBox.getValue(),
            "candidate@example.com", // TODO: Get actual email from candidate
            positionField.getText().trim(),
            dateTime,
            "Scheduled",
            typeComboBox.getValue(),
            SessionManager.getInstance().getCurrentUser().getEmail()
        );
        interview.setNotes(notesArea.getText().trim());

        // Schedule the interview
        if (interviewService.scheduleInterview(interview)) {
            showAlert("Success", "Interview scheduled successfully");
            goToDashboard();
        } else {
            showAlert("Error", "Failed to schedule interview");
        }
    }

    @FXML
    private void goToDashboard() {
        JobPortal.loadScene("recruiter_dashboard.fxml", "Recruiter Dashboard");
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }
} 